#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('px-scraper-node:server');
const http = require('http');
const app = require('../app');
const { db } = require('../db/db');
require('dotenv').config();

/**
 * Get port from environment and store in Express.
 */

const port = process.env.PORT || '3000';
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  console.log(`server listening on port: ${port}`);
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onReady() {
  server.listen(port);
}

server.on('error', onError);
server.on('listening', onListening);
server.on('ready', onReady);

db.connect((err) => {
  if (err) {
    console.error('db connection error', err.stack);
  } else {
    server.emit('ready');
  }
});
